<?xml version="1.0" encoding="utf-8"?>
<popups:PopUpBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
							 xmlns:s="library://ns.adobe.com/flex/spark" 
							 xmlns:mx="library://ns.adobe.com/flex/mx" 
							 creationComplete="titlewindow_creationCompleteHandler(event)" 
							 xmlns:popups="application.view.popups.*" 
							 xmlns:asl="application.components.asl.*"
							 enabled="{GshahScreenCapture.ready}" xmlns:msl="application.components.msl.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.UIDUtil;
			
			import spark.components.WindowedApplication;
			import spark.events.IndexChangeEvent;
			
			import application.skins.TimelineVScrollBarSkin;
			
			import gshah.GshahScreenCapture;
			import gshah.GshahVideoController;
			import gshah.events.GshahEvent;
			import gshah.icons.CaptureScreenIcon;
			
			import sys.SystemSettings;
			
			
			protected function titlewindow_closeHandler(event:CloseEvent):void
			{
				if(screenCapture.running)
				{
					screenCapture.cancelRecording();
				}
				close();
			}
			
			[Bindable]
			private var screenCapture:GshahScreenCapture=new GshahScreenCapture;
			protected function screenRecorderButton_changeHandler(event:Event):void
			{
				if(screenRecorderButton.selected)
				{
					
					launchCapture()
					
				}
			}
			
			private function launchCapture():void
			{
				var ids:Array=[];
				
				for each (var o:Object in micList.selectedItems) 
				{
					ids.push(o.id);
					
				}
				screenCapture.addEventListener(GshahEvent.GSHAH_COMPLETE, onScreenCaptureCompete);
				screenCapture.startRecording(SystemSettings.tempPath+File.separator+'capturedVideo_'+UIDUtil.createUID()+".flv",ids,recordingSizeOptionsList.selectedItem.id,highlightMouseCursorCheckBox.selected);
				
			}
			
			private function getCaptureButtonEnabled(captureButtonSelected:Boolean,captureRunning:Boolean):Boolean
			{
				if(captureButtonSelected)
				{
					return captureRunning;
				}
				else
				{
					return !captureRunning;
				}
			}
			
			protected function onScreenCaptureCompete(event:GshahEvent):void
			{
				GshahVideoController.instance.getMetadata(event.data as String);
				screenRecorderButton.selected=false;
				GlamourAlert.show('Captured media was added to library');
			}			
			
			protected function titlewindow_creationCompleteHandler(event:FlexEvent):void
			{
				/* width=FlexGlobals.topLevelApplication.width*0.55;
				height=FlexGlobals.topLevelApplication.width*0.1; */
				addEventListener(CloseEvent.CLOSE,titlewindow_closeHandler);
				
				WindowedApplication(FlexGlobals.topLevelApplication).addEventListener(Event.CLOSING,onApplicationClose);
				
			}
			
			protected function onApplicationClose(event:Event):void
			{
				if(screenCapture.running)
				{
					screenCapture.cancelRecording();
				}
			}
			
			
			protected function micList_initializeHandler(event:FlexEvent):void
			{
				
				micList.scroller.verticalScrollBar.setStyle('fixedThumbSize',true);
				micList.scroller.verticalScrollBar.setStyle("skinClass", TimelineVScrollBarSkin);
				
				micList.addEventListener('dataProviderChanged', micList_dataProviderChangedHandler);
				
				if(micList.dataProvider!=null&&micList.dataProvider.length>0)
				{
					micList.dispatchEvent(new Event('dataProviderChanged'));
				}
			}
			protected function micList_changeHandler(event:IndexChangeEvent=null):void
			{
				
				var ids:Array=[];
				var labels:Array=[];
				
				for each (var o:Object in micList.selectedItems) 
				{
					ids.push(o.id);
					labels.push(o.label);
					
				}
				
				SharedObject.getLocal('gshah').data["micList_lastSelectedItem"]=labels.join(':');
				SharedObject.getLocal('gshah').data["micList_lastSelectedIndex"]=ids.join(':');
				
			}
			protected function micList_dataProviderChangedHandler(event:Event):void
			{
				if(micList.dataProvider!=null&&micList.dataProvider.length>0&&SharedObject.getLocal('gshah').data["micList_lastSelectedIndex"]!=null)
				{
					var ids:Array=SharedObject.getLocal('gshah').data["micList_lastSelectedIndex"].toString().split(':');
					var labels:Array=SharedObject.getLocal('gshah').data["micList_lastSelectedItem"].toString().split(':');
					
					var si:Vector.<Object>=new Vector.<Object>;
					for (var i:int = 0; i < ids.length; i++) 
					{
						for each (var o:Object in micList.dataProvider) 
						{
							if(o.id==ids[i]&&o.label==labels[i])
							{
								si.push(o);
								break;
							}	
						}
					}
					
					micList.selectedItems=si;
					
					
				}
				else if(micList.dataProvider!=null&&micList.dataProvider.length>0)
				{
					micList.selectedIndex=0;
				}
			}
			
			protected function microphoneCheckBox_changeHandler(event:Event):void
			{
				if(microphoneCheckBox.selected)
				{
					micList.selectedIndex=0;
					SharedObject.getLocal('gshah').data["micList_lastSelectedItem"]=micList.dataProvider.getItemAt(0).label;
					SharedObject.getLocal('gshah').data["micList_lastSelectedIndex"]=micList.dataProvider.getItemAt(0).id;
				}
				else
				{
					micList.selectedIndex=-1;
					SharedObject.getLocal('gshah').data["micList_lastSelectedItem"]='';
					SharedObject.getLocal('gshah').data["micList_lastSelectedIndex"]='';
					
				}
			}
			
			protected function recordingSizeOptionsCheckBox_changeHandler(event:IndexChangeEvent):void
			{
				SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedItem"]=event.target.selectedItem.label;
				SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedIndex"]=event.target.selectedItem.id;
			}
			
			protected function recordingSizeOptionsCheckBox_initializeHandler(event:FlexEvent):void
			{
				event.target.addEventListener('dataProviderChanged', recordingSizeOptionsCheckBox_dataProviderChangedHandler);
				
				if(event.target.dataProvider!=null&&event.target.dataProvider.length>0&&SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedIndex"]!=null)
				{
					event.target.dispatchEvent(new Event('dataProviderChanged'));
				}
				
				
			}
			
			protected function recordingSizeOptionsCheckBox_dataProviderChangedHandler(event:Event):void
			{
				if(event.target.dataProvider!=null&&event.target.dataProvider.length>0&&SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedIndex"]!=null)
				{
					
					for each (var o:Object in event.target.dataProvider) 
					{
						if(o.id==SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedIndex"])
						{
							event.target.selectedItem=o;
							if(o.label==SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedItem"])
							{
								break;
							}
						}
						else if(o.label==SharedObject.getLocal('gshah').data[event.target.id+"_lastSelectedItem"])
						{
							event.target.selectedItem=o;
						}	
					}
				}
			}
			
			protected function highlightMouseCursorCheckBox_creationCompleteHandler(event:FlexEvent):void
			{
				if(SharedObject.getLocal('gshah').data[event.target.id+"_selected"]=='false')
				{
					event.target.selected=false;
				}
				else
				{
					event.target.selected=true;
					
				}
			}
			
			protected function highlightMouseCursorCheckBox_changeHandler(event:Event):void
			{
				SharedObject.getLocal('gshah').data[event.target.id+"_selected"]=event.target.selected?'true':'false';
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" left="30" right="30" top="30" bottom="30" gap="20">
		<s:Button id="closeButton" click="dispatchEvent(new CloseEvent(CloseEvent.CLOSE));" 
				  width="20" height="20" 
				  skinClass="application.skins.GrayCloseButtonSkin"/>
		<s:HGroup width="100%">
			<s:CheckBox id="microphoneCheckBox" height="20"
						label="Record audio with:"
						skinClass="application.skins.DarkCheckBoxSkin"
						enabled="{micList.dataProvider.length>0}"
						selected="{micList.selectedItems.length>0}"
						change="microphoneCheckBox_changeHandler(event)"/>
			
			
			<msl:MultiSelectionList id="micList" width="100%" selectionColor="0xff0000"
									contentBackgroundAlpha="0" horizontalScrollPolicy="off"
									dataProvider="{GshahScreenCapture.audioDeviceDataProvider}"
									initialize="micList_initializeHandler(event)"
									change="micList_changeHandler(event)" 
									allowMultipleSelection="true"
									color="0xffffff">
				<msl:layout>
					<s:VerticalLayout paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3" gap="3" 
									  horizontalAlign="left" verticalAlign="top" requestedMinRowCount="1" requestedMaxRowCount="2"/>
				</msl:layout>
				
			</msl:MultiSelectionList>
			
		</s:HGroup>
		<s:Label id="labelDisplay"
				 styleName="ButtonBaseStyle"
				 color="0xffffff"
				 text="Screen Recording Options"
				 verticalAlign="middle"/>
		<s:HGroup verticalAlign="middle" height="65" gap="20">
			<s:BitmapImage id="screenRecorderBitmapImage" source="{CaptureScreenIcon}" 
						   width="{screenRecorderBitmapImage.height*186.2/113.2}" height="100%"
						   smooth="true" smoothingQuality="high"/>
			<s:VGroup height="100%" gap="15" paddingTop="10" paddingBottom="5">
				<s:CheckBox id="highlightMouseCursorCheckBox" height="20"
							label="Highlight mouse cursor"
							skinClass="application.skins.DarkCheckBoxSkin"
							selected="true" change="highlightMouseCursorCheckBox_changeHandler(event)"
							creationComplete="highlightMouseCursorCheckBox_creationCompleteHandler(event)"
							/>
				
				
				<s:DropDownList id="recordingSizeOptionsList" width="100%"
								requireSelection="true" minWidth="210"
								dataProvider="{new ArrayCollection([{id:0, label:'Record whole screen'},{id:1, label:'Select a part of screen to record'}])}"
								horizontalScrollPolicy="off"
								change="recordingSizeOptionsCheckBox_changeHandler(event)"
								initialize="recordingSizeOptionsCheckBox_initializeHandler(event)"/>
			</s:VGroup>
			<s:Spacer width="-40"/>
			<s:ToggleButton id="screenRecorderButton" width="{screenRecorderButton.height}"  height="100%" enabled="{getCaptureButtonEnabled(screenCapture.running,screenRecorderButton.selected)}"
							skinClass="application.skins.ScreenRecorderButtonSkin" fontSize="14" change="screenRecorderButton_changeHandler(event)"/> 
			
			
		</s:HGroup>
	</s:VGroup>
</popups:PopUpBorderContainer>
