<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:timeline="application.components.timeline.*"
				height="{GshahAssetUtils.TIMELINE_PREVIEW_DEFAULT_HEIGHT}"
				width="{TimelineView.TIMELINE_LEFT}" 
				autoDrawBackground="true">
	<fx:Script>
		<![CDATA[
			import application.managers.GshahAnimationLibrary;
			import application.managers.TimelineManager;
			import application.managers.UndoRedoManager;
			import application.managers.components.UndoRedoManagerItem;
			import application.managers.components.UndoRedoManagerItemType;
			import application.view.TimelineView;
			
			import gshah.GshahVideoController;
			import gshah.entities.GshahAsset;
			import gshah.entities.GshahAssetType;
			import gshah.utils.GshahAssetUtils;
			
			[Bindable]
			private var timelineManager:TimelineManager=TimelineManager.instance;
			
			[Bindable]
			private var visibleOnPreview:Boolean;
			
			override public function set data(value:Object):void
			{
				super.data = value;
				visible=false;
				for each (var _a:GshahAsset in timelineManager.dataProvider) 
				{
					if(_a.layer==itemIndex)
					{
						visibleOnPreview=_a.visibleOnPreview;
						visible=true;
						break;
					}
				}
			}
			
			protected function removeButton_clickHandler(event:MouseEvent):void
			{
				var undos:Array=[];
				var redos:Array=[];
				
				for (var i:int = 0; i < timelineManager.dataProvider.length; i++) 
				{
					var _a:GshahAsset=timelineManager.dataProvider.getItemAt(i) as GshahAsset; 
					
					if(_a.layer==itemIndex)
					{
						undos.push(UndoRedoManager.addAssetFunction(_a,i));
						redos.push(UndoRedoManager.removeAssetFunction(_a));
						
						timelineManager.removeAsset(_a);
						if(_a.type==GshahAssetType.ANIMATION&&GshahAnimationLibrary.instance.isOutro(_a.source.animationId))
						{
							for each (var __a:GshahAsset in TimelineManager.instance.dataProvider.source) 
							{
								if(__a.parrentUuid==_a.uuid)
								{
									undos.push(UndoRedoManager.addAssetFunction(__a,i));
								}
							}
						}
						i--;
					}
					else if(_a.layer>itemIndex)
					{
						break;
					}
				}
				
				UndoRedoManager.instance.addItem(new UndoRedoManagerItem(UndoRedoManagerItemType.REMOVE,undos,redos));
				
			}
			
			protected function unbindButton_clickHandler(event:MouseEvent):void
			{
				
			}
			
			protected function viewButton_clickHandler(event:MouseEvent):void
			{
				visibleOnPreview=!visibleOnPreview;
				
				var undos:Array=[];
				var redos:Array=[];
				
				
				for each (var _a:GshahAsset in timelineManager.dataProvider) 
				{
					if(_a.layer==itemIndex)
					{
						if(_a.type==GshahAssetType.ANIMATION&&GshahAnimationLibrary.instance.isOutro(_a.source.animationId))
						{
							for each (var __a:GshahAsset in TimelineManager.instance.dataProvider.source) 
							{
								if(__a.parrentUuid==_a.uuid)
								{
									__a.visibleOnPreview=!__a.visibleOnPreview;
									if(__a.visibleOnPreview)
									{
										GshahVideoController.instance.addAsset(__a);
										
									}
									else
									{
										GshahVideoController.instance.removeAsset(__a);
										
									}
									undos.push(UndoRedoManager.updateAssetVisible(__a));
									redos.push(UndoRedoManager.updateAssetVisible(__a));
									
								}
							}
						}
						_a.visibleOnPreview=!_a.visibleOnPreview;
						
						if(_a.visibleOnPreview)
						{
							GshahVideoController.instance.addAsset(_a);
						}
						else
						{
							GshahVideoController.instance.removeAsset(_a);
							
						}
						undos.push(UndoRedoManager.updateAssetVisible(_a));
						redos.push(UndoRedoManager.updateAssetVisible(_a));
						if(timelineManager.currentIndex==timelineManager.dataProvider.getItemIndex(_a))
						{
							timelineManager.currentIndex=-1;
						}
					}
					else if(_a.layer>itemIndex)
					{
						break;
					}
					
					
				}
				UndoRedoManager.instance.addItem(new UndoRedoManagerItem(UndoRedoManagerItemType.VISIBLE,undos,redos));
				
				
			}
		]]>
	</fx:Script>
	<s:BorderContainer width="100%" height="100%" borderVisible="false">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry ratio="0" color="0x272727"/>
					<s:GradientEntry ratio="1" color="0x1a1a1a"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:VGroup depth="3" horizontalAlign="center" width="100%" gap="2" verticalCenter="0">
			<timeline:TimelineCrossIcon id="removeButton" width="13" height="13" lineWeight="3" 
										click="removeButton_clickHandler(event)"/>
			<timeline:TimelineViewButton id="viewButton" width="17" height="13" onPreview="{visibleOnPreview}" click="viewButton_clickHandler(event)"/>
			<!--<timeline:TimelineUnbindButton id="unbindButton" width="17" height="13" click="unbindButton_clickHandler(event)"
			toolTip="unbind {data.type==GshahAssetType.VIDEO?'audio':'video'}"
			visible="{}"/>-->
		</s:VGroup>  
	</s:BorderContainer>
</s:ItemRenderer>
