<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark ToggleButton component.  

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21" blendMode="layer" 
				   alpha.disabledStates="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ToggleButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		
	
			
		<![CDATA[
			import gshah.GshahScreenCapture;
			import gshah.icons.CaptureIcon;
			
			
			/* Define the skin elements that should not be colorized. 
			For toggle button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			
			/**
			 * @private
			 */    
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			[Bindable]
			
			private var cornerRadius:Number = 2;
			
			
		]]>
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	<s:Ellipse left="0" right="0" top="0" bottom="0" includeIn="disabled"
			   verticalCenter="0" horizontalCenter="0">
		<s:fill>
			<s:SolidColor color="#000000"/>
		</s:fill>
	</s:Ellipse>
	<s:Ellipse left="0" right="0" top="0" bottom="0" excludeFrom="disabled"
			   verticalCenter="0" horizontalCenter="0">
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Ellipse>
	<s:BitmapImage source="{CaptureIcon}" smooth="true" smoothingQuality="high"
				   alpha="1" alpha.disabled="0.5" alpha.over="0.9" alpha.down="0.8"  
				   left="0" right="-1" top="0" bottom="-1"/>
	<s:Label verticalCenter="0" horizontalCenter="0" text="RECORD" text.selectedStates="STOP"
			 color="#7F2424" styleName="ButtonBaseStyle"
			 fontSize="{getStyle('fontSize')}" textAlign="center"/>
	<s:mask>
		<s:Group width="{width}" height="{height}">
			<s:Ellipse   left="0" right="0" top="0" bottom="0" 
						 verticalCenter="0" horizontalCenter="0">
				<s:fill>
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
			</s:Ellipse>
		</s:Group>
	</s:mask>
	
</s:SparkButtonSkin>
